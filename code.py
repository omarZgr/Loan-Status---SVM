# -*- coding: utf-8 -*-
"""code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1htGLr9k80Bu5OuHiXLac7Qut93G1sV4L
"""

import numpy as np
import pandas as pd

from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

data = pd.read_csv('/content/data.csv')

print(data.shape)
data

print(data.isnull().sum())
print(data['Gender'].value_counts())


Gender = data['Gender'].mode()[0]
Married = data['Married'].mode()[0]
Dependents = data['Dependents'].mode()[0]
Self_Employed = data['Self_Employed'].mode()[0]
LoanAmount = data['LoanAmount'].mode()[0]
Loan_Amount_Term = data['Loan_Amount_Term'].mode()[0]
Credit_History = data['Credit_History'].mode()[0]



data['Gender'].fillna(Gender,inplace=True)
data['Married'].fillna(Married,inplace=True)
data['Dependents'].fillna(Dependents,inplace=True)
data['Self_Employed'].fillna(Self_Employed,inplace=True)
data['LoanAmount'].fillna(LoanAmount,inplace=True)
data['Loan_Amount_Term'].fillna(Loan_Amount_Term,inplace=True)
data['Credit_History'].fillna(Credit_History,inplace=True)
data

print(data.isnull().sum())
data

data['Loan_Status'].value_counts()

data.describe()

data

loan_ID_encd = LabelEncoder()
gender_encd = LabelEncoder()
married_encd = LabelEncoder()
dependents_encd = LabelEncoder()
education_encd = LabelEncoder()
self_Employed_encd = LabelEncoder()
property_Area_encd = LabelEncoder()



data['Loan_ID'] = loan_ID_encd.fit_transform(data['Loan_ID'])
data['Gender'] = gender_encd.fit_transform(data['Gender'])
data['Married'] = married_encd.fit_transform(data['Married'])
data['Dependents'] = dependents_encd.fit_transform(data['Dependents'])
data['Education'] = education_encd.fit_transform(data['Education'])
data['Self_Employed'] = self_Employed_encd.fit_transform(data['Self_Employed'])
data['Property_Area'] = property_Area_encd.fit_transform(data['Property_Area'])

X = data.drop(['Loan_ID','Loan_Status'],axis=1)
Y = data['Loan_Status']
print(X.mean())
print(X.shape)
Y

scaler = StandardScaler()
X_std = pd.DataFrame(scaler.fit_transform(X))

X_std

X_train,X_test,Y_train,Y_test = train_test_split(X_std,Y,random_state=9,stratify=Y)
print(X_std.shape,'  ',X_train.shape,' ',X_test.shape)

model1 = svm.SVC(kernel='linear')

model1.fit(X_train,Y_train)

X_train_prediciton = model1.predict(X_train)
train_data_accuracy = accuracy_score(X_train_prediciton,Y_train)
print('train_data_accuracy : ',train_data_accuracy)


X_test_prediction = model1.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)
print('test_data_accuracy : ',test_data_accuracy)

model2 = LogisticRegression()

model2.fit(X_train,Y_train)

X_train_prediciton_2 = model2.predict(X_train)
train_data_accuracy_2 = accuracy_score(X_train_prediciton_2,Y_train)
print('train_data_accuracy : ',train_data_accuracy_2)


X_test_prediction_2 = model2.predict(X_test)
test_data_accuracy_2 = accuracy_score(X_test_prediction_2,Y_test)
print('test_data_accuracy : ',test_data_accuracy_2)

def manipuler(input_a) :

    input_a = np.asarray(input_a)
    input_a = input_a.reshape(1, -1)


    input_a[0][0] = gender_encd.fit_transform([input_a[0][0]])
    input_a[0][1] = married_encd.fit_transform([input_a[0][1]])
    input_a[0][2] = dependents_encd.fit_transform([input_a[0][2]])
    input_a[0][3] = education_encd.fit_transform([input_a[0][3]])
    input_a[0][4] = self_Employed_encd.fit_transform([input_a[0][4]])
    input_a[0][10] = property_Area_encd.fit_transform([input_a[0][5]])

    input_a = input_a.reshape(1, -1)


    return input_a


input_a = ('Male','Yes','3+','Graduate','No',4000,7750,290,360,1,'Semiurban')

input_a = np.array(input_a).reshape(1, -1)


input_a = pd.DataFrame(input_a)
input_a = manipuler(input_a)


out = model2.predict(input_a)

print(f"{input_ORG}  --->  ",out)